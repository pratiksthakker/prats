package serializationTrainingDemos;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;

/** Inner classes (declared in a non-static context) will always 
 * contain implicit references to their enclosing classes and these 
 * references are always non-transient. So, while object serialization 
 * process of inner classes, the enclosing classes will also be 
 * serialized. Now the problem is that the synthetic fields generated 
 * by Java compilers to implement inner classes are pretty much implementation 
 * dependent and hence we may face compatibility issues while deserialization 
 * on a different platform having a .class file generated by a different Java 
 * compiler. The default serialVerionUID may also be different in such cases. 
 * Not only this, the names assigned to the local and anonymous inner classes 
 * are also implementation dependent. Thus, we see that object serialization 
 * of inner classes may pose some unavoidable compatibility issues and 
 * hence the serialization of inner classes is strongly discouraged. 
*/

class Empl implements Serializable  //{
{
	public String name;
	public int age;
	public EmpDet obj = null;
	public Empl(){System.out.println("hi outer here");}
	public Empl(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	   class EmpDet  //implements Serializable
	   {
		public String FName;

		public EmpDet() {
			System.out.println("hi here");
		}
		public EmpDet(String fName) {
			super();
			System.out.println("hi here");
			FName = fName;
		}
		
	}
	}
public class MainClass4 {
public static void main(String[] args) {
		
	
	/*Connection con = DriverManager.getConnection(url)
	MainClass4 obj = new MainClass4();
	String str1 = "abcdef";
	String str2 = "abcdfG";
	System.out.println(str1.hashCode());
	System.out.println(str2.hashCode());
	System.out.println(obj);*/
	//Empl.EmpDet obj = new Empl().new EmpDet("abc");
	//Empl.EmpDet obj =  new Empl.EmpDet("abc");//static inner
	Empl obj = new Empl("aaa", 12);
	try {
		ObjectOutputStream ois = new ObjectOutputStream(new FileOutputStream("D:\\m11"));
		ois.writeObject(obj);
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	System.out.println("done");
	
}
}
